"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.width = exports.scale = exports.isTablet = exports.isIOS = exports.isAndroid = exports.height = exports.StyleSheet = void 0;

var _reactNative = require("react-native");

const {
  width: W,
  height: H
} = _reactNative.Dimensions.get('screen');

const pixelDensity = _reactNative.PixelRatio.get();

const metricsNumber = () => {
  const density = pixelDensity * 160;
  const x = Math.pow(W * pixelDensity / density, 2);
  const y = Math.pow(H * pixelDensity / density, 2);
  const screenInches = Math.sqrt(x + y) + 1.6;
  return screenInches;
};

const objectMap = (object, mapFn) => {
  return Object.keys(object).reduce((result, key) => {
    result[key] = mapFn(object[key]);
    return result;
  }, {});
};

const objectMap2 = (object, overload) => {
  return Object.keys(object).reduce((result, key) => {
    if (typeof object[key] === 'number') {
      if (key.includes('flex') || key.includes('opacity') || key.includes('elevation')) {
        result[key] = object[key];
      } else {
        result[key] = scale(object[key]);
      }
    } else {
      result[key] = object[key];
    }

    return { ...overload,
      ...result
    };
  }, {});
};

const checkTablet = () => {
  const adjustedWidth = width * pixelDensity;
  const adjustedHeight = height * pixelDensity;

  if (pixelDensity < 2 && (adjustedWidth >= 1000 || adjustedHeight >= 1000)) {
    return true;
  } else {
    return pixelDensity === 2 && (adjustedWidth >= 1920 || adjustedHeight >= 1920);
  }
};

const width = W;
exports.width = width;
const height = H;
exports.height = height;
const isTablet = checkTablet();
exports.isTablet = isTablet;
const isAndroid = _reactNative.Platform.OS === 'android';
exports.isAndroid = isAndroid;
const isIOS = _reactNative.Platform.OS === 'ios';
exports.isIOS = isIOS;

const scale = number => {
  const ratio = (metricsNumber() + pixelDensity) / 10;
  const value = number * Number(ratio.toFixed(1));
  return Number(value.toFixed(1));
};

exports.scale = scale;
const StyleSheet = {
  create: function (styleSheet) {
    let overload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _reactNative.StyleSheet.create(objectMap(styleSheet, value => {
      const style = objectMap2(value, overload);
      return style;
    }));
  }
};
exports.StyleSheet = StyleSheet;
//# sourceMappingURL=mathMetric.js.map